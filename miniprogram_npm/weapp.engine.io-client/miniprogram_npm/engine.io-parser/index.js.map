{"version":3,"sources":["index.js","utf8.js","keys.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\r\n * Module dependencies.\r\n */\r\n\r\nvar utf8 = require('./utf8');\r\nvar hasBinary = require('has-binary2');\r\nvar after = require('after');\r\nvar keys = require('./keys');\r\n\r\n/**\r\n * Current protocol version.\r\n */\r\nexports.protocol = 3;\r\n\r\n/**\r\n * Packet types.\r\n */\r\n\r\nvar packets = exports.packets = {\r\n    open:     0    // non-ws\r\n  , close:    1    // non-ws\r\n  , ping:     2\r\n  , pong:     3\r\n  , message:  4\r\n  , upgrade:  5\r\n  , noop:     6\r\n};\r\n\r\nvar packetslist = keys(packets);\r\n\r\n/**\r\n * Premade error packet.\r\n */\r\n\r\nvar err = { type: 'error', data: 'parser error' };\r\n\r\n/**\r\n * Encodes a packet.\r\n *\r\n *     <packet type id> [ <data> ]\r\n *\r\n * Example:\r\n *\r\n *     5hello world\r\n *     3\r\n *     4\r\n *\r\n * Binary is encoded in an identical principle\r\n *\r\n * @api private\r\n */\r\n\r\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\r\n  if (typeof supportsBinary === 'function') {\r\n    callback = supportsBinary;\r\n    supportsBinary = null;\r\n  }\r\n\r\n  if (typeof utf8encode === 'function') {\r\n    callback = utf8encode;\r\n    utf8encode = null;\r\n  }\r\n\r\n  if (Buffer.isBuffer(packet.data)) {\r\n    return encodeBuffer(packet, supportsBinary, callback);\r\n  } else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {\r\n    return encodeBuffer({ type: packet.type, data: arrayBufferToBuffer(packet.data) }, supportsBinary, callback);\r\n  }\r\n\r\n  // Sending data as a utf-8 string\r\n  var encoded = packets[packet.type];\r\n\r\n  // data fragment is optional\r\n  if (undefined !== packet.data) {\r\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\r\n  }\r\n\r\n  return callback('' + encoded);\r\n};\r\n\r\n/**\r\n * Encode Buffer data\r\n */\r\n\r\nfunction encodeBuffer(packet, supportsBinary, callback) {\r\n  if (!supportsBinary) {\r\n    return exports.encodeBase64Packet(packet, callback);\r\n  }\r\n\r\n  var data = packet.data;\r\n  var typeBuffer = new Buffer(1);\r\n  typeBuffer[0] = packets[packet.type];\r\n  return callback(Buffer.concat([typeBuffer, data]));\r\n}\r\n\r\n/**\r\n * Encodes a packet with binary data in a base64 string\r\n *\r\n * @param {Object} packet, has `type` and `data`\r\n * @return {String} base64 encoded message\r\n */\r\n\r\nexports.encodeBase64Packet = function(packet, callback){\r\n  var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);\r\n  var message = 'b' + packets[packet.type];\r\n  message += data.toString('base64');\r\n  return callback(message);\r\n};\r\n\r\n/**\r\n * Decodes a packet. Data also available as an ArrayBuffer if requested.\r\n *\r\n * @return {Object} with `type` and `data` (if any)\r\n * @api private\r\n */\r\n\r\nexports.decodePacket = function (data, binaryType, utf8decode) {\r\n  if (data === undefined) {\r\n    return err;\r\n  }\r\n\r\n  var type;\r\n\r\n  // String data\r\n  if (typeof data === 'string') {\r\n\r\n    type = data.charAt(0);\r\n\r\n    if (type === 'b') {\r\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\r\n    }\r\n\r\n    if (utf8decode) {\r\n      data = tryDecode(data);\r\n      if (data === false) {\r\n        return err;\r\n      }\r\n    }\r\n\r\n    if (Number(type) != type || !packetslist[type]) {\r\n      return err;\r\n    }\r\n\r\n    if (data.length > 1) {\r\n      return { type: packetslist[type], data: data.substring(1) };\r\n    } else {\r\n      return { type: packetslist[type] };\r\n    }\r\n  }\r\n\r\n  // Binary data\r\n  if (binaryType === 'arraybuffer') {\r\n    // wrap Buffer/ArrayBuffer data into an Uint8Array\r\n    var intArray = new Uint8Array(data);\r\n    type = intArray[0];\r\n    return { type: packetslist[type], data: intArray.buffer.slice(1) };\r\n  }\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    data = arrayBufferToBuffer(data);\r\n  }\r\n  type = data[0];\r\n  return { type: packetslist[type], data: data.slice(1) };\r\n};\r\n\r\nfunction tryDecode(data) {\r\n  try {\r\n    data = utf8.decode(data, { strict: false });\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return data;\r\n}\r\n\r\n/**\r\n * Decodes a packet encoded in a base64 string.\r\n *\r\n * @param {String} base64 encoded message\r\n * @return {Object} with `type` and `data` (if any)\r\n */\r\n\r\nexports.decodeBase64Packet = function(msg, binaryType) {\r\n  var type = packetslist[msg.charAt(0)];\r\n  var data = new Buffer(msg.substr(1), 'base64');\r\n  if (binaryType === 'arraybuffer') {\r\n    var abv = new Uint8Array(data.length);\r\n    for (var i = 0; i < abv.length; i++){\r\n      abv[i] = data[i];\r\n    }\r\n    data = abv.buffer;\r\n  }\r\n  return { type: type, data: data };\r\n};\r\n\r\n/**\r\n * Encodes multiple messages (payload).\r\n *\r\n *     <length>:data\r\n *\r\n * Example:\r\n *\r\n *     11:hello world2:hi\r\n *\r\n * If any contents are binary, they will be encoded as base64 strings. Base64\r\n * encoded strings are marked with a b before the length specifier\r\n *\r\n * @param {Array} packets\r\n * @api private\r\n */\r\n\r\nexports.encodePayload = function (packets, supportsBinary, callback) {\r\n  if (typeof supportsBinary === 'function') {\r\n    callback = supportsBinary;\r\n    supportsBinary = null;\r\n  }\r\n\r\n  if (supportsBinary && hasBinary(packets)) {\r\n    return exports.encodePayloadAsBinary(packets, callback);\r\n  }\r\n\r\n  if (!packets.length) {\r\n    return callback('0:');\r\n  }\r\n\r\n  function encodeOne(packet, doneCallback) {\r\n    exports.encodePacket(packet, supportsBinary, false, function(message) {\r\n      doneCallback(null, setLengthHeader(message));\r\n    });\r\n  }\r\n\r\n  map(packets, encodeOne, function(err, results) {\r\n    return callback(results.join(''));\r\n  });\r\n};\r\n\r\nfunction setLengthHeader(message) {\r\n  return message.length + ':' + message;\r\n}\r\n\r\n/**\r\n * Async array map using after\r\n */\r\n\r\nfunction map(ary, each, done) {\r\n  var result = new Array(ary.length);\r\n  var next = after(ary.length, done);\r\n\r\n  for (var i = 0; i < ary.length; i++) {\r\n    each(ary[i], function(error, msg) {\r\n      result[i] = msg;\r\n      next(error, result);\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n * Decodes data when a payload is maybe expected. Possible binary contents are\r\n * decoded from their base64 representation\r\n *\r\n * @param {String} data, callback method\r\n * @api public\r\n */\r\n\r\nexports.decodePayload = function (data, binaryType, callback) {\r\n  if (typeof data !== 'string') {\r\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\r\n  }\r\n\r\n  if (typeof binaryType === 'function') {\r\n    callback = binaryType;\r\n    binaryType = null;\r\n  }\r\n\r\n  if (data === '') {\r\n    // parser error - ignoring payload\r\n    return callback(err, 0, 1);\r\n  }\r\n\r\n  var length = '', n, msg, packet;\r\n\r\n  for (var i = 0, l = data.length; i < l; i++) {\r\n    var chr = data.charAt(i);\r\n\r\n    if (chr !== ':') {\r\n      length += chr;\r\n      continue;\r\n    }\r\n\r\n    if (length === '' || (length != (n = Number(length)))) {\r\n      // parser error - ignoring payload\r\n      return callback(err, 0, 1);\r\n    }\r\n\r\n    msg = data.substr(i + 1, n);\r\n\r\n    if (length != msg.length) {\r\n      // parser error - ignoring payload\r\n      return callback(err, 0, 1);\r\n    }\r\n\r\n    if (msg.length) {\r\n      packet = exports.decodePacket(msg, binaryType, false);\r\n\r\n      if (err.type === packet.type && err.data === packet.data) {\r\n        // parser error in individual packet - ignoring payload\r\n        return callback(err, 0, 1);\r\n      }\r\n\r\n      var more = callback(packet, i + n, l);\r\n      if (false === more) return;\r\n    }\r\n\r\n    // advance cursor\r\n    i += n;\r\n    length = '';\r\n  }\r\n\r\n  if (length !== '') {\r\n    // parser error - ignoring payload\r\n    return callback(err, 0, 1);\r\n  }\r\n\r\n};\r\n\r\n/**\r\n *\r\n * Converts a buffer to a utf8.js encoded string\r\n *\r\n * @api private\r\n */\r\n\r\nfunction bufferToString(buffer) {\r\n  var str = '';\r\n  for (var i = 0, l = buffer.length; i < l; i++) {\r\n    str += String.fromCharCode(buffer[i]);\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n *\r\n * Converts a utf8.js encoded string to a buffer\r\n *\r\n * @api private\r\n */\r\n\r\nfunction stringToBuffer(string) {\r\n  var buf = new Buffer(string.length);\r\n  for (var i = 0, l = string.length; i < l; i++) {\r\n    buf.writeUInt8(string.charCodeAt(i), i);\r\n  }\r\n  return buf;\r\n}\r\n\r\n/**\r\n *\r\n * Converts an ArrayBuffer to a Buffer\r\n *\r\n * @api private\r\n */\r\n\r\nfunction arrayBufferToBuffer(data) {\r\n  // data is either an ArrayBuffer or ArrayBufferView.\r\n  var array = new Uint8Array(data.buffer || data);\r\n  var length = data.byteLength || data.length;\r\n  var offset = data.byteOffset || 0;\r\n  var buffer = new Buffer(length);\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    buffer[i] = array[offset + i];\r\n  }\r\n  return buffer;\r\n}\r\n\r\n/**\r\n * Encodes multiple messages (payload) as binary.\r\n *\r\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\r\n * 255><data>\r\n *\r\n * Example:\r\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\r\n *\r\n * @param {Array} packets\r\n * @return {Buffer} encoded payload\r\n * @api private\r\n */\r\n\r\nexports.encodePayloadAsBinary = function (packets, callback) {\r\n  if (!packets.length) {\r\n    return callback(new Buffer(0));\r\n  }\r\n\r\n  map(packets, encodeOneBinaryPacket, function(err, results) {\r\n    return callback(Buffer.concat(results));\r\n  });\r\n};\r\n\r\nfunction encodeOneBinaryPacket(p, doneCallback) {\r\n\r\n  function onBinaryPacketEncode(packet) {\r\n\r\n    var encodingLength = '' + packet.length;\r\n    var sizeBuffer;\r\n\r\n    if (typeof packet === 'string') {\r\n      sizeBuffer = new Buffer(encodingLength.length + 2);\r\n      sizeBuffer[0] = 0; // is a string (not true binary = 0)\r\n      for (var i = 0; i < encodingLength.length; i++) {\r\n        sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\r\n      }\r\n      sizeBuffer[sizeBuffer.length - 1] = 255;\r\n      return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));\r\n    }\r\n\r\n    sizeBuffer = new Buffer(encodingLength.length + 2);\r\n    sizeBuffer[0] = 1; // is binary (true binary = 1)\r\n    for (var i = 0; i < encodingLength.length; i++) {\r\n      sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);\r\n    }\r\n    sizeBuffer[sizeBuffer.length - 1] = 255;\r\n\r\n    doneCallback(null, Buffer.concat([sizeBuffer, packet]));\r\n  }\r\n\r\n  exports.encodePacket(p, true, true, onBinaryPacketEncode);\r\n\r\n}\r\n\r\n\r\n/*\r\n * Decodes data when a payload is maybe expected. Strings are decoded by\r\n * interpreting each byte as a key code for entries marked to start with 0. See\r\n * description of encodePayloadAsBinary\r\n\r\n * @param {Buffer} data, callback method\r\n * @api public\r\n */\r\n\r\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\r\n  if (typeof binaryType === 'function') {\r\n    callback = binaryType;\r\n    binaryType = null;\r\n  }\r\n\r\n  var bufferTail = data;\r\n  var buffers = [];\r\n  var i;\r\n\r\n  while (bufferTail.length > 0) {\r\n    var strLen = '';\r\n    var isString = bufferTail[0] === 0;\r\n    for (i = 1; ; i++) {\r\n      if (bufferTail[i] === 255)  break;\r\n      // 310 = char length of Number.MAX_VALUE\r\n      if (strLen.length > 310) {\r\n        return callback(err, 0, 1);\r\n      }\r\n      strLen += '' + bufferTail[i];\r\n    }\r\n    bufferTail = bufferTail.slice(strLen.length + 1);\r\n\r\n    var msgLength = parseInt(strLen, 10);\r\n\r\n    var msg = bufferTail.slice(1, msgLength + 1);\r\n    if (isString) msg = bufferToString(msg);\r\n    buffers.push(msg);\r\n    bufferTail = bufferTail.slice(msgLength + 1);\r\n  }\r\n\r\n  var total = buffers.length;\r\n  for (i = 0; i < total; i++) {\r\n    var buffer = buffers[i];\r\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\r\n  }\r\n};\r\n","/*! https://mths.be/utf8js v2.1.2 by @mathias */\r\n\r\nvar stringFromCharCode = String.fromCharCode;\r\n\r\n// Taken from https://mths.be/punycode\r\nfunction ucs2decode(string) {\r\n\tvar output = [];\r\n\tvar counter = 0;\r\n\tvar length = string.length;\r\n\tvar value;\r\n\tvar extra;\r\n\twhile (counter < length) {\r\n\t\tvalue = string.charCodeAt(counter++);\r\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\r\n\t\t\t// high surrogate, and there is a next character\r\n\t\t\textra = string.charCodeAt(counter++);\r\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\r\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\r\n\t\t\t} else {\r\n\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\r\n\t\t\t\t// code unit is the high surrogate of a surrogate pair\r\n\t\t\t\toutput.push(value);\r\n\t\t\t\tcounter--;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toutput.push(value);\r\n\t\t}\r\n\t}\r\n\treturn output;\r\n}\r\n\r\n// Taken from https://mths.be/punycode\r\nfunction ucs2encode(array) {\r\n\tvar length = array.length;\r\n\tvar index = -1;\r\n\tvar value;\r\n\tvar output = '';\r\n\twhile (++index < length) {\r\n\t\tvalue = array[index];\r\n\t\tif (value > 0xFFFF) {\r\n\t\t\tvalue -= 0x10000;\r\n\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\r\n\t\t\tvalue = 0xDC00 | value & 0x3FF;\r\n\t\t}\r\n\t\toutput += stringFromCharCode(value);\r\n\t}\r\n\treturn output;\r\n}\r\n\r\nfunction checkScalarValue(codePoint, strict) {\r\n\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\r\n\t\tif (strict) {\r\n\t\t\tthrow Error(\r\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\r\n\t\t\t\t' is not a scalar value'\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n/*--------------------------------------------------------------------------*/\r\n\r\nfunction createByte(codePoint, shift) {\r\n\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\r\n}\r\n\r\nfunction encodeCodePoint(codePoint, strict) {\r\n\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\r\n\t\treturn stringFromCharCode(codePoint);\r\n\t}\r\n\tvar symbol = '';\r\n\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\r\n\t}\r\n\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\r\n\t\tif (!checkScalarValue(codePoint, strict)) {\r\n\t\t\tcodePoint = 0xFFFD;\r\n\t\t}\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\r\n\t\tsymbol += createByte(codePoint, 6);\r\n\t}\r\n\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\r\n\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\r\n\t\tsymbol += createByte(codePoint, 12);\r\n\t\tsymbol += createByte(codePoint, 6);\r\n\t}\r\n\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\r\n\treturn symbol;\r\n}\r\n\r\nfunction utf8encode(string, opts) {\r\n\topts = opts || {};\r\n\tvar strict = false !== opts.strict;\r\n\r\n\tvar codePoints = ucs2decode(string);\r\n\tvar length = codePoints.length;\r\n\tvar index = -1;\r\n\tvar codePoint;\r\n\tvar byteString = '';\r\n\twhile (++index < length) {\r\n\t\tcodePoint = codePoints[index];\r\n\t\tbyteString += encodeCodePoint(codePoint, strict);\r\n\t}\r\n\treturn byteString;\r\n}\r\n\r\n/*--------------------------------------------------------------------------*/\r\n\r\nfunction readContinuationByte() {\r\n\tif (byteIndex >= byteCount) {\r\n\t\tthrow Error('Invalid byte index');\r\n\t}\r\n\r\n\tvar continuationByte = byteArray[byteIndex] & 0xFF;\r\n\tbyteIndex++;\r\n\r\n\tif ((continuationByte & 0xC0) == 0x80) {\r\n\t\treturn continuationByte & 0x3F;\r\n\t}\r\n\r\n\t// If we end up here, it’s not a continuation byte\r\n\tthrow Error('Invalid continuation byte');\r\n}\r\n\r\nfunction decodeSymbol(strict) {\r\n\tvar byte1;\r\n\tvar byte2;\r\n\tvar byte3;\r\n\tvar byte4;\r\n\tvar codePoint;\r\n\r\n\tif (byteIndex > byteCount) {\r\n\t\tthrow Error('Invalid byte index');\r\n\t}\r\n\r\n\tif (byteIndex == byteCount) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Read first byte\r\n\tbyte1 = byteArray[byteIndex] & 0xFF;\r\n\tbyteIndex++;\r\n\r\n\t// 1-byte sequence (no continuation bytes)\r\n\tif ((byte1 & 0x80) == 0) {\r\n\t\treturn byte1;\r\n\t}\r\n\r\n\t// 2-byte sequence\r\n\tif ((byte1 & 0xE0) == 0xC0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\r\n\t\tif (codePoint >= 0x80) {\r\n\t\t\treturn codePoint;\r\n\t\t} else {\r\n\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t}\r\n\t}\r\n\r\n\t// 3-byte sequence (may include unpaired surrogates)\r\n\tif ((byte1 & 0xF0) == 0xE0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tbyte3 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\r\n\t\tif (codePoint >= 0x0800) {\r\n\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\r\n\t\t} else {\r\n\t\t\tthrow Error('Invalid continuation byte');\r\n\t\t}\r\n\t}\r\n\r\n\t// 4-byte sequence\r\n\tif ((byte1 & 0xF8) == 0xF0) {\r\n\t\tbyte2 = readContinuationByte();\r\n\t\tbyte3 = readContinuationByte();\r\n\t\tbyte4 = readContinuationByte();\r\n\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\r\n\t\t\t(byte3 << 0x06) | byte4;\r\n\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\r\n\t\t\treturn codePoint;\r\n\t\t}\r\n\t}\r\n\r\n\tthrow Error('Invalid UTF-8 detected');\r\n}\r\n\r\nvar byteArray;\r\nvar byteCount;\r\nvar byteIndex;\r\nfunction utf8decode(byteString, opts) {\r\n\topts = opts || {};\r\n\tvar strict = false !== opts.strict;\r\n\r\n\tbyteArray = ucs2decode(byteString);\r\n\tbyteCount = byteArray.length;\r\n\tbyteIndex = 0;\r\n\tvar codePoints = [];\r\n\tvar tmp;\r\n\twhile ((tmp = decodeSymbol(strict)) !== false) {\r\n\t\tcodePoints.push(tmp);\r\n\t}\r\n\treturn ucs2encode(codePoints);\r\n}\r\n\r\nmodule.exports = {\r\n\tversion: '2.1.2',\r\n\tencode: utf8encode,\r\n\tdecode: utf8decode\r\n};\r\n","\r\n/**\r\n * Gets the keys for an object.\r\n *\r\n * @return {Array} keys\r\n * @api private\r\n */\r\n\r\nmodule.exports = Object.keys || function keys (obj){\r\n  var arr = [];\r\n  var has = Object.prototype.hasOwnProperty;\r\n\r\n  for (var i in obj) {\r\n    if (has.call(obj, i)) {\r\n      arr.push(i);\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n"]}