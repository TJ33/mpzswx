{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\r\n * Module dependencies.\r\n */\r\n\r\nvar AssertionError = require('assert').AssertionError\r\n  , callsite = require('callsite')\r\n  , fs = require('fs')\r\n\r\n/**\r\n * Expose `assert`.\r\n */\r\n\r\nmodule.exports = process.env.NO_ASSERT\r\n  ? function(){}\r\n  : assert;\r\n\r\n/**\r\n * Assert the given `expr`.\r\n */\r\n\r\nfunction assert(expr) {\r\n  if (expr) return;\r\n\r\n  var stack = callsite();\r\n  var call = stack[1];\r\n  var file = call.getFileName();\r\n  var lineno = call.getLineNumber();\r\n  var src = fs.readFileSync(file, 'utf8');\r\n  var line = src.split('\\n')[lineno-1];\r\n  var src = line.match(/assert\\((.*)\\)/)[1];\r\n\r\n  var err = new AssertionError({\r\n    message: src,\r\n    stackStartFunction: stack[0].getFunction()\r\n  });\r\n\r\n  throw err;\r\n}\r\n"]}