{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\n\r\nvar has = Object.prototype.hasOwnProperty;\r\n\r\n/**\r\n * An auto incrementing id which we can use to create \"unique\" Ultron instances\r\n * so we can track the event emitters that are added through the Ultron\r\n * interface.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\nvar id = 0;\r\n\r\n/**\r\n * Ultron is high-intelligence robot. It gathers intelligence so it can start improving\r\n * upon his rudimentary design. It will learn from your EventEmitting patterns\r\n * and exterminate them.\r\n *\r\n * @constructor\r\n * @param {EventEmitter} ee EventEmitter instance we need to wrap.\r\n * @api public\r\n */\r\nfunction Ultron(ee) {\r\n  if (!(this instanceof Ultron)) return new Ultron(ee);\r\n\r\n  this.id = id++;\r\n  this.ee = ee;\r\n}\r\n\r\n/**\r\n * Register a new EventListener for the given event.\r\n *\r\n * @param {String} event Name of the event.\r\n * @param {Functon} fn Callback function.\r\n * @param {Mixed} context The context of the function.\r\n * @returns {Ultron}\r\n * @api public\r\n */\r\nUltron.prototype.on = function on(event, fn, context) {\r\n  fn.__ultron = this.id;\r\n  this.ee.on(event, fn, context);\r\n\r\n  return this;\r\n};\r\n/**\r\n * Add an EventListener that's only called once.\r\n *\r\n * @param {String} event Name of the event.\r\n * @param {Function} fn Callback function.\r\n * @param {Mixed} context The context of the function.\r\n * @returns {Ultron}\r\n * @api public\r\n */\r\nUltron.prototype.once = function once(event, fn, context) {\r\n  fn.__ultron = this.id;\r\n  this.ee.once(event, fn, context);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the listeners we assigned for the given event.\r\n *\r\n * @returns {Ultron}\r\n * @api public\r\n */\r\nUltron.prototype.remove = function remove() {\r\n  var args = arguments\r\n    , ee = this.ee\r\n    , event;\r\n\r\n  //\r\n  // When no event names are provided we assume that we need to clear all the\r\n  // events that were assigned through us.\r\n  //\r\n  if (args.length === 1 && 'string' === typeof args[0]) {\r\n    args = args[0].split(/[, ]+/);\r\n  } else if (!args.length) {\r\n    if (ee.eventNames) {\r\n      args = ee.eventNames();\r\n    } else if (ee._events) {\r\n      args = [];\r\n\r\n      for (event in ee._events) {\r\n        if (has.call(ee._events, event)) args.push(event);\r\n      }\r\n\r\n      if (Object.getOwnPropertySymbols) {\r\n        args = args.concat(Object.getOwnPropertySymbols(ee._events));\r\n      }\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < args.length; i++) {\r\n    var listeners = ee.listeners(args[i]);\r\n\r\n    for (var j = 0; j < listeners.length; j++) {\r\n      event = listeners[j];\r\n\r\n      //\r\n      // Once listeners have a `listener` property that stores the real listener\r\n      // in the EventEmitter that ships with Node.js.\r\n      //\r\n      if (event.listener) {\r\n        if (event.listener.__ultron !== this.id) continue;\r\n      } else if (event.__ultron !== this.id) {\r\n        continue;\r\n      }\r\n\r\n      ee.removeListener(args[i], event);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Destroy the Ultron instance, remove all listeners and release all references.\r\n *\r\n * @returns {Boolean}\r\n * @api public\r\n */\r\nUltron.prototype.destroy = function destroy() {\r\n  if (!this.ee) return false;\r\n\r\n  this.remove();\r\n  this.ee = null;\r\n\r\n  return true;\r\n};\r\n\r\n//\r\n// Expose the module.\r\n//\r\nmodule.exports = Ultron;\r\n"]}